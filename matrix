#!/bin/bash

###########################################################################################################################
#
# NAME
#   matrix
# SYNOPSIS
#   matrix OPERATION [ARGUMENT]...
# OPTIONS
#   matrix dims [MATRIX]
#   matrix transpose [MATRIX]
#   matrix mean [MATRIX]
#   matrix add MATRIX_LEFT MATRIX_RIGHT
#   matrix multiply MATRIX_LEFT MATRIX_RIGHT
# DESCRIPTION
#   A bash shell script that calculates basic matrix operations using input from either a file or stdin.
#     * The input should be whole number values separated by tabs into a rectangular matrix.
#   This script can print the dimensions of a matrix, transpose a matrix, calculate the mean vector of a matrix,
#   add two matrixes, and multiply two matrices.
#   The following are examples of invalid matrices:
#     * An empty matrix.
#     * A matrix where the final entry on a row is followed by a tab chracter.
#     * A matrix with empty lines.
#     * A matrix with any element that is blank or not an integer.
# AUTHOR
#   Written by Andrew Swaim
#
###########################################################################################################################

function dims(){
    # NAME
    #   dims - Prints the dimensions of the matrix as the number of rows, followed by a space, then the number of columns. 
    # SYNOPSIS
    #   dims [MATRIX]
    # DESCRIPTION
    #   Prints error message to stderr, nothing to stdout and return value != 0 if:
    #     * Argument count is greater than 1 (e.g. `matrix dims m1 m2`).
    #     * Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix dims no_such_file`).
    #   Otherwise, prints "ROWS COLS" (Space separated!) to stdout, nothing to stderr, and returns 0.
    # AUTHOR
    #   Written by Andrew Swaim

    datafilepath="datafile$$"   # Variable to hold a path to an input file
    flag=1                      # Flag to determine if this input file was created as a temp file or not

    # If the function ends suddenly, remove temporary files
    trap "[[ $flag -eq 0 ]] && rm -f $datafilepath; echo 'CTRL+C received, exiting'; exit 1" INT HUP TERM

    # Argument testing
    if [[ $# -eq 0 ]]
    then
        # If no arguments were given, get user input and output it to a temporary file
        cat > "$datafilepath"
        flag=0
    elif [[ $# -eq 1 ]]
    then
        # If an existing file was given as an argument, use it instead
        datafilepath=$1
    elif [[ $# -gt 1 ]]
    then
        perror "\nToo many arguments for function dims [MATRIX]\n" && return 1
    else
        perror "\nSomething went wrong with the number of arguments for dims [MATRIX]\n" && return 1
    fi

    # File testing
    if [[ ! -r $datafilepath ]]
    then
        perror "\nFile $datafilepath does not exist or is not readable\n" && return 1
    else # If all tests pass
    
        # Output rows and columns separated by a space
        echo -e "$( wc -l < $datafilepath ) $( head -1 $datafilepath | wc -w )"
    fi

    # If a temporary file was created, delete it before exiting
    if [[ $flag -eq 0 ]]
    then
        rm -f $datafilepath
    fi

    return 0
}

function transpose(){
    # NAME
    #   transpose - Reflects the elements of the matrix along the main diagonal.
    #               Thus an MxN matrix will become an NxM matrix and the values along the main diagonal will remain unchanged.
    # SYNOPSIS
    #   transpose [MATRIX]
    # DESCRIPTION
    #   Prints error message to stderr, nothing to stdout and return value != 0 if:
    #     * Argument count is greater than 1 (e.g. `matrix transpose m1 m2`).
    #     * Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix transpose no_such_file`).
    #   Otherwise, prints the transpose of the input, in a valid matrix format to stdout, nothing to stderr, and returns 0.
    # AUTHOR
    #   Written by Andrew Swaim

    datafilepath="datafile$$"   # Variable to hold a path to an input file
    flag=1                      # Flag to determine if this input file was created as a temp file or not

    # If the function ends suddenly, remove temporary files
    trap "[[ $flag -eq 0 ]] && rm -f $datafilepath; echo 'CTRL+C received, exiting'; exit 1" INT HUP TERM

    # Argument testing
    if [[ $# -eq 0 ]]
    then
        # If no arguments were given, get user input and output to a temporary file
        cat > "$datafilepath"
        flag=0
    elif [[ $# -eq 1 ]]
    then
        # If an existing file was given as an argument, use it instead
        datafilepath=$1
    elif [[ $# -gt 1 ]]
    then
        perror "\nToo many arguments for function transpose [MATRIX]\n" && return 1
    else
        perror "\nSomething went wrong with the number of arguments for transpose [MATRIX]\n" && return 1
    fi

    # File testing
    if [[ ! -r $datafilepath ]]
    then
        perror "\nFile $datafilepath does not exist or is not readable\n" && return 1
    else # If all tests pass

        # Get number of columns
        cols=$( head -1 $datafilepath | wc -w )

        # Transpose each column into a row
        for (( col=1; col<=$cols; col++ ))
        do
            # Get current column and paste as a row
            cut -f"$col" $datafilepath | paste -s
        done
    fi
    
    # If a temporary file was created, delete it before exiting
    if [[ $flag -eq 0 ]]
    then
        rm -f $datafilepath
    fi

    return 0
}

function mean(){
    # NAME
    #   mean - Takes an MxN matrix and return an 1xN row vector. 
    #          The first element is the mean of column one, the second element is the mean of column two, and so on.
    # SYNOPSIS
    #   mean [MATRIX]
    # DESCRIPTION
    #   Prints error message to stderr, nothing to stdout and return value != 0 if:
    #     * Argument count is greater than 1 (e.g. `matrix mean m1 m2`).
    #     * Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix mean no_such_file`).
    #   Otherwise, prints a row vector mean of the input matrix to stdout, nothing to stderr, and returns 0. 
    #   All values must round to the nearest integer, with ***.5 values rounded away from zero.
    # AUTHOR
    #   Written by Andrew Swaim

    datafilepath="datafile$$"   # Variable to hold a path to an input file
    flag=1                      # Flag to determine if this input file was created as a temp file or not

    # If the function ends suddenly, remove temporary files
    trap "[[ $flag -eq 0 ]] && rm -f $datafilepath; echo 'CTRL+C received, exiting'; exit 1" INT HUP TERM

    # Argument testing
    if [[ $# -eq 0 ]]
    then
        # If no arguments were given, get user input and output to a temporary file
        cat > "$datafilepath"
        flag=0
    elif [[ $# -eq 1 ]]
    then
        # If an existing file was given as an argument, use it instead
        datafilepath=$1
    elif [[ $# -gt 1 ]]
    then
        perror "\nToo many arguments for function mean [MATRIX]\n" && return 1
    else
        perror "\nSomething went wrong with the number of arguments for mean [MATRIX]\n" && return 1
    fi

    # File testing
    if [[ ! -r $datafilepath ]]
    then
        perror "\nFile $datafilepath does not exist or is not readable\n" && return 1
    else # If all tests pass

        # Get number of columns
        cols=$( head -1 $datafilepath | wc -w )

        # Get the number of rows (to be used as the count of each column)
        count=$( wc -l < $datafilepath )

        # Calculate the mean of each column
        for (( col=1; col<=$cols; col++ ))
        do
            # Get a column
            cutcol=$( cut -f"$col" $datafilepath | paste -s )

            # Sum the column
            sum=0
            for num in $cutcol
            do
                (( sum += num ))
            done

            # Calculate the mean 
            echo -n $(( (sum + (count/2)*( (sum>0)*2-1)) / count ))
            if [[ $col -ne $cols ]]
            then
                # Add a \t after each result
                echo -ne "\t" 
            else
                # If this is the last entry in the results print a \n instead of a \t
                echo 
            fi
        done
    fi

    # If a temporary file was created, delete it before exiting
    if [[ $flag -eq 0 ]]
    then
        rm -f $datafilepath
    fi

    return 0
}

function add(){
    # NAME
    #   add - Takes two MxN matrices and adds them together element-wise to produce an MxN matrix. 
    #         Returns an error if the matrices do not have the same dimensions. 
    # SYNOPSIS
    #   add MATRIX_LEFT MATRIX_RIGHT
    # DESCRIPTION
    #   Prints error message to stderr, nothing to stdout and return value != 0 if:
    #     * Argument count does not equal 2 (e.g. `matrix add m1 m2 m3` or `matrix add m1`).
    #     * Argument count is 2 but the file named by either argument is not readable (e.g. `matrix add m1 no_such_file`).
    #     * The dimensions of the input matrices do not allow them to be added together following the rules of matrix addition.
    #   Otherwise, prints the sum of both matricies, in a valid matrix format to stdout, nothing to stderr, and returns 0.
    # AUTHOR
    #   Written by Andrew Swaim
  
    # If the function ends suddenly
    trap "echo 'CTRL+C received, exiting'; exit 1" INT HUP TERM

    # Argument testing
    if [[ $# -ne 2 ]]
    then
        perror "\nIncorrect number of arguments for function add MATRIX_LEFT MATRIX_RIGHT\n" && return 1
    fi
   
    # File testing
    if [[ ! -r $1 ]] || [[ ! -r $2 ]]
    then
        perror "\nFiles $1 and/or $2 do not exist or are not readable\n" && return 1
    fi 
        
    # Get dimensions of each file 
    cols1=$( head -1 $1 | wc -w )
    rows1=$( wc -l < $1 )
    cols2=$( head -1 $2 | wc -w )
    rows2=$( wc -l < $2 )

    # Test matrix dimensions (matrix dimensions must be the same for matrix addition)
    if [[ $cols1 -ne $cols2 ]] || [[ $rows1 -ne $rows2 ]]
    then
        perror "\nDimensions of MATRIX_LEFT and MATRIX_RIGHT must be the same\n" && return 1
    else # All tests pass
          
        # Loop through both files line by line
        while read line1 <&3 && read line2 <&4
        do
            # Loop through each element in each line
            for (( i=1; i<=$cols1; i++ ))
            do
                # Add the current elements from each line and print the result
                echo -n $(( $( echo "$line1" | cut -f"$i" ) + $( echo "$line2" | cut -f"$i" ) ))
                if [[ $i -ne $cols1 ]]
                then
                    # Add a \t after each result
                    echo -ne "\t" 
                else
                    # Unless this is the last result in the line, in which case add a \n instead
                    echo
                fi
            done
        done 3<"$1" 4<"$2"
    fi

    return 0
}

function multiply(){
    # NAME
    #   multiply - Takes an MxN and NxP matrix and produces an MxP matrix. 
    #              Unlike addition, matrix multiplication is not commutative. That is A*B != B*A.
    # SYNOPSIS
    #   multiply MATRIX_LEFT MATRIX_RIGHT
    # DESCRIPTION
    #   Prints error message to stderr, nothing to stdout and return value != 0 if:
    #     * Argument count does not equal 2 (e.g. `matrix multiply m1 m2 m3` or `matrix multiply m1`).
    #     * Argument count is 2 but the file named by either argument is not readable (e.g. `matrix multiply m1 no_such_file`).
    #     * Dimensions of the inputs don't allow them to be multiplied together following the rules of matrix multiplication.
    #   Otherwise, prints the product of both matricies, in a valid matrix format to stdout, nothing to stderr, and returns 0.
    #   (`matrix multiply A B` should return A*B, not B*A)
    # AUTHOR
    #   Written by Andrew Swaim

    # If the function ends suddenly
    trap "echo 'CTRL+C received, exiting'; exit 1" INT HUP TERM

    # Argument testing
    if [[ $# -ne 2 ]]
    then
        perror "\nIncorrect number of arguments for function add MATRIX_LEFT MATRIX_RIGHT\n" && return 1
    fi
   
    # File testing
    if [[ ! -r $1 ]] || [[ ! -r $2 ]]
    then
        perror "\nFiles $1 and/or $2 do not exist or are not readable\n" && return 1
    fi 
        
    # Get dimensions of each file 
    cols1=$( head -1 $1 | wc -w )
    rows1=$( wc -l < $1 )
    cols2=$( head -1 $2 | wc -w )
    rows2=$( wc -l < $2 )

    # Test matrix dimensions (MATRIX_LEFT must have the same number of rows as MATRIX_RIGHT has columns)
    if [[ $cols1 -ne $rows2 ]]
    then
        perror "\nMATRIX_LEFT must have the same number of rows as MATRIX_RIGHT has columns\n" && return 1
    else # All tests pass
        
        # Read a row from MATRIX_LEFT
        while read line1 
        do
            # For each row in MATRIX_LEFT, calculate the dot product with a column in MATRIX_RIGHT
            for (( col=1; col<=cols2; col++ ))
            do
            
                # Get a column from MATRIX_RIGHT
                line2=$( cut -f"$col" $2 | paste -s )

                # Calculate the dot product
                dot=0
                for (( i=1; i<=$cols1; i++ ))
                do
                    (( dot += $( echo "$line1" | cut -f"$i" ) * $( echo "$line2" | cut -f"$i" ) ))
                done

                # Print the result
                if [[ $col -ne $cols2 ]]
                then
                    # Print the result with a \t after each element
                    echo -ne "$dot\t" 
                else
                    # Unless this is the last result in the line, in which case add a \n instead
                    echo "$dot"
                fi
            done
        done < $1 
    fi

    return 0
}

function perror(){
    # NAME
    #   perror - print a stack trace and error message
    # SYNOPSIS
    #   perror [STRING]
    # DESCRIPTION
    #   Echoes the STRING(s) to standard error with a stack trace for debugging.
    #   The value of the status flag $? is not changed by perror.
    # AUTHOR
    #   Written by Ryan Gambord

    status=$? # Capture status of previous command 
    echo -e "\e[36mTraceback (most recent call last):\e[0m" >&2
    i=${#BASH_LINENO[@]} # Get number of items in stack trace

    # This section prints a stack trace of the current execution stack
    while 
        [ $i -gt 0 ] # Iterate to the top of the stack
    do
        until # Loop until we get to the bottom of caller stack (this is safer than offsetting $i)
            ((i--))
            info=($(caller $i)) # Get caller info
        do :; done # Do nothing
  
        echo "  File \"${info[2]}\", line ${info[0]}, in ${info[1]}()" >&2 # Print caller info
        if [ $i -ne 0 ] # Check if we're at the top of the stack (perror call is at top)
        then
            echo "    "$(head "${info[2]}" -n ${info[0]} | tail -n 1) >&2 # Print trace if not at top
        else
            echo -en "\e[31mERROR\e[0m: " >&2 # Print error message if at top
            [ $# -gt 0 ] && echo -e "$*" >&2 || echo "(no error message specified)" >&2
        fi
    done
    return $status
}

###########################################################################################################################

# If no arguments were given when calling matrix script
[[ $# -eq 0 ]] && perror "\nNo arguments given\n" && exit 1

# If an incorrect function name was given as an argument when calling matrix script
[[ $1 != "dims" ]] && \
[[ $1 != "transpose" ]] && \
[[ $1 != "mean" ]] && \
[[ $1 != "add" ]] && \
[[ $1 != "multiply" ]] && \
perror "\nThat function does not exist.\
\nAvailable functions:\
\n\tdims [MATRIX]\
\n\ttranspose [MATRIX]\
\n\tmean [MATRIX]\
\n\tadd MATRIX_LEFT MATRIX_RIGHT\
\n\tmultiply MATRIX_LEFT MATRIX_RIGHT\n" && exit 1

# Otherwise call the given function and pass remaining arguments to it
$1 "${@:2}"

